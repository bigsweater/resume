{"version":3,"sources":["app/components/Base.vue","app/components/Starfield.vue","app/initialize.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApwBA;AAAA;;;;ACAA;;;;AACA;;;;;;AAEA,IAAI,MAAM,kBAAQ;AAChB,MAAI,MADY;;AAGhB,cAAY;AACV;AADU,GAHI;;AAOhB,YAAU,uHAPM;;AAShB,WAAS;AATO,CAAR,CAAV","file":"public/app.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  name: 'Base'\n};\nif (module.exports.__esModule) module.exports = module.exports.default\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"app/components/Base.vue\"\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, (typeof module.exports === \"function\" ? module.exports.options : module.exports).template)\n  }\n})()}","var __vueify_style__ = require(\"vueify-insert-css\").insert(\"\\n.starfield.debug {\\n  z-index: 2;\\n}\\n.starfield-debug {\\n  position: absolute;\\n  left: 20px;\\n  top:  20px;\\n  color: #fff;\\n  font-size: 16px;\\n  z-index: 1;\\n  line-height: 16px;\\n  font-family: 'Helvetica Neue', Helvetica, arial, sans-serif;\\n  font-weight: 300;\\n}\\n.starfield {\\n  height:   100%;\\n  left:     0;\\n  margin:   0;\\n  padding:  0;\\n  position: absolute;\\n  top:      0;\\n  width:    100%;\\n  z-index:  0;\\n}\\n\\n.starfield canvas {\\n  height:   100%;\\n  left:     0;\\n  position: absolute;\\n  top:      0;\\n  width:    100%;\\n}\\n\\n\")\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _fastdom = require('fastdom');\n\nvar _fastdom2 = _interopRequireDefault(_fastdom);\n\nvar _mainloop = require('mainloop.js');\n\nvar _mainloop2 = _interopRequireDefault(_mainloop);\n\nvar _onecolor = require('onecolor');\n\nvar _onecolor2 = _interopRequireDefault(_onecolor);\n\nvar _stats = require('stats.js');\n\nvar _stats2 = _interopRequireDefault(_stats);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Animation logic\n\n\nvar stats = new _stats2.default();\n\n/**\n * Fast UUID generator, RFC4122 version 4 compliant.\n * @author Jeff Ward (jcward.com).\n * @license MIT license\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n **/\nvar UUID = function () {\n  var self = {};\n  var lut = [];\n\n  for (var i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n  self.generate = function () {\n    var d0 = Math.random() * 0xffffffff | 0;\n    var d1 = Math.random() * 0xffffffff | 0;\n    var d2 = Math.random() * 0xffffffff | 0;\n    var d3 = Math.random() * 0xffffffff | 0;\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];\n  };\n  return self;\n}();\n\nvar props = {\n  // Colors\n  starColor: {\n    type: String,\n    default: 'rgba(255,255,255,1)'\n  },\n\n  bgColor: {\n    type: String,\n    default: 'rgba(0,0,0,1)'\n  },\n\n  // Interactions\n  mouseAdjust: {\n    type: Boolean,\n    default: false\n  },\n\n  tiltAdjust: {\n    type: Boolean,\n    default: false\n  },\n\n  resizeAdjust: {\n    type: Boolean,\n    default: true\n  },\n\n  resizing: {\n    type: Boolean,\n    default: false\n  },\n\n  easing: {\n    type: Number,\n    default: 1\n  },\n\n  clickToWarp: {\n    type: Boolean,\n    default: false\n  },\n\n  hyperspace: {\n    type: Boolean,\n    default: false\n  },\n\n  warpFactor: {\n    type: Number,\n    default: 10\n  },\n\n  opacity: {\n    type: Number,\n    default: 0.1\n  },\n\n  // Star settings\n  speed: {\n    type: Number,\n    default: 1\n  },\n\n  quantity: {\n    type: Number,\n    default: 512\n  },\n\n  // Etc.\n  debug: {\n    type: Boolean,\n    default: false\n  }\n};\n\nexports.default = {\n  name: 'Starfield',\n\n  data: function data() {\n    return {\n      // Mouse and cursor\n      mouse: {\n        x: 0,\n        y: 0\n      },\n\n      cursor: {\n        x: 0,\n        y: 0\n      },\n\n      // Component state - Mainly instructions for the starz() function\n      state: {\n        init: true, // Init?\n        canvas: false, // Canvas?\n        start: false, // Start animation?\n        stop: false, // Stop animation?\n        destroy: false,\n        reset: false, // Reset animation?\n        uid: UUID.generate(),\n        running: false\n      }\n    };\n  },\n\n\n  props: props,\n\n  computed: {\n    ids: function ids() {\n      // Compute IDs\n      return {\n        cid: 'canvas-' + this.state.uid,\n        vid: 'viewport-' + this.state.uid\n      };\n    },\n    colors: function colors() {\n      // Use one.color to add opacity based on state\n      return {\n        fill: this.hyperspace ? (0, _onecolor2.default)(this.bgColor).alpha(this.opacity).cssa() : this.bgColor\n      };\n    },\n    compColors: function compColors() {\n      return {\n        stars: (0, _onecolor2.default)(this.starColor).hex(),\n        bg: (0, _onecolor2.default)(this.bgColor).hex()\n      };\n    },\n    ratio: function ratio() {\n      return {\n        computed: this.quantity / 2\n      };\n    },\n    compSpeed: function compSpeed() {\n      // computed speed\n      return {\n        lyph: this.hyperspace ? this.speed * this.warpFactor : this.speed // light-years per hour\n      };\n    },\n    compQuantity: function compQuantity() {\n      return this.maxStars > 0 ? this.maxStars : this.quantity;\n    }\n  },\n\n  methods: {\n    init: function init() {\n      this.state.init = true;\n      this.state.canvas = true;\n      this.state.start = true;\n      this.state.running = false;\n      this.state.stop = false;\n      this.state.reset = false;\n      this.starz();\n      this.listeners();\n\n      if (this.debug) {\n        stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n        document.body.appendChild(stats.dom);\n        stats.dom.style.right = '20px';\n        stats.dom.style.left = 'auto';\n      }\n    },\n    starz: function starz() {\n      var self = this;\n\n      var sd = {\n        // Set up viewport data\n        w: 0,\n        h: 0,\n        el: null,\n        ctx: null,\n\n        // Canvas measurements\n        cw: 0,\n        ch: 0,\n\n        // Axes\n        x: 0,\n        y: 0,\n        z: 0,\n\n        // Star data\n        star: {\n          // Etc\n          colorRatio: 0,\n\n          // The stars\n          arr: []\n        },\n\n        prevTime: 0\n      };\n\n      // DOM interactions\n      var dom = {\n        measure: {\n          viewport: function viewport() {\n            _fastdom2.default.measure(function () {\n              sd.w = self.$el.clientWidth;\n              sd.h = self.$el.clientHeight;\n\n              // Set up axes\n              sd.x = Math.round(sd.w / 2);\n              sd.y = Math.round(sd.h / 2);\n              sd.z = (sd.w + sd.h) / 2;\n\n              sd.star.colorRatio = 1 / sd.z;\n\n              if (self.cursor.x === 0 || self.cursor.y === 0) {\n                // Initialize cursor position\n                self.cursor.x = sd.x;\n                self.cursor.y = sd.y;\n              }\n\n              if (self.mouse.x === 0 || self.mouse.y === 0) {\n                // Initialize mouse position\n                self.mouse.x = self.cursor.x - sd.x;\n                self.mouse.y = self.cursor.y - sd.y;\n              }\n            });\n\n            _fastdom2.default.catch = function () {\n              return;\n            };\n          }\n        }\n      };\n\n      // Star functions\n      var sf = {\n        /**\n         * Set up the viewport\n         */\n\n        viewport: function viewport() {\n          dom.measure.viewport();\n        },\n\n\n        /**\n         * Set up the canvas\n         */\n        canvas: function canvas() {\n          dom.measure.viewport();\n\n          // Set up context\n          var c = document.getElementById(self.ids.cid);\n          sd.ctx = c.getContext('2d');\n\n          // Adjust canvas dimensions\n          sd.ctx.canvas.width = sd.w;\n          sd.ctx.canvas.height = sd.h;\n\n          // Set up canvas colors\n          sd.ctx.fillStyle = self.colors.fill;\n          sd.ctx.strokeStyle = self.starColor;\n        },\n\n\n        /**\n         * Initialize the array of stars and their positions, if it hasn't been done already\n         */\n        bigBang: function bigBang() {\n          var starinited = sd.star.arr.length === self.compQuantity;\n          var starrandomized = false;\n\n          if (sd.star.arr.length > 0) {\n            if (sd.star.arr[0][0] !== 0 || sd.star.arr[0][0] !== Infinity) {\n              starrandomized = true;\n            }\n          }\n\n          var boom = function boom() {\n            sd.star.arr = new Array(self.compQuantity);\n\n            // Set up the star array\n            for (var i = 0; i < self.compQuantity; i++) {\n              sd.star.arr[i] = new Array(8);\n\n              // Give each star random positions on the canvas\n              sd.star.arr[i][0] = Math.random() * sd.w * 2 - sd.x * 2;\n              sd.star.arr[i][1] = Math.random() * sd.h * 2 - sd.y * 2;\n              sd.star.arr[i][2] = Math.round(Math.random() * sd.z);\n              sd.star.arr[i][3] = 0;\n              sd.star.arr[i][4] = 0;\n              sd.star.arr[i][5] = 0; // prev x\n              sd.star.arr[i][6] = 0; // prev y\n              sd.star.arr[i][7] = true; // test var\n            }\n          };\n\n          if (!starinited) {\n            boom();\n          } else if (starinited && !starrandomized) {\n            boom();\n          }\n        },\n\n\n        /**\n         * Updates canvas el dimensions, adjusts star coords proportionally\n         */\n        resize: function resize() {\n          if (self.resizing) {\n            // Save old dimensions and star positions\n            var oldStar = sd.star;\n            dom.measure.viewport();\n\n            sd.cw = sd.ctx.canvas.width;\n            sd.ch = sd.ctx.canvas.height;\n\n            // Only resize if context width/height !== container width/height\n            if (sd.cw !== sd.w || sd.ch !== sd.h) {\n              sd.x = Math.round(sd.w / 2);\n              sd.y = Math.round(sd.h / 2);\n              sd.z = (sd.w + sd.h) / 2;\n\n              sd.star.colorRatio = 1 / sd.z;\n\n              // Get ratio of new dimensions to old dimensions\n              var rw = sd.w / sd.cw;\n              var rh = sd.h / sd.ch;\n\n              // Update context dimensions\n              sd.ctx.canvas.width = sd.w;\n              sd.ctx.canvas.height = sd.h;\n\n              // Recalculate star positions\n              if (!sd.star.arr.length) {\n                sf.bigBang();\n              } else {\n                for (var i = 0; i < self.compQuantity; i++) {\n                  sd.star.arr[i];\n                  sd.star.arr[i][0] = oldStar.arr[i][0] * rw;\n                  sd.star.arr[i][1] = oldStar.arr[i][1] * rh;\n\n                  sd.star.arr[i][3] = sd.x + sd.star.arr[i][0] / sd.star.arr[i][2] * self.ratio.computed;\n                  sd.star.arr[i][4] = sd.y + sd.star.arr[i][1] / sd.star.arr[i][2] * self.ratio.computed;\n                }\n              }\n\n              // Reset canvas colors (context resets completely when resized)\n              sd.ctx.fillStyle = self.colors.fill;\n              sd.ctx.strokeStyle = self.starColor;\n\n              self.resizing = false;\n            }\n          } else {\n            return;\n          }\n        },\n\n\n        anim: {\n          init: function init() {\n            _mainloop2.default.setBegin(sf.anim.begin).setUpdate(sf.anim.update).setDraw(sf.anim.draw).setEnd(sf.anim.end);\n          },\n\n\n          /**\n           * Kick off the animation loop\n           */\n          start: function start() {\n            _mainloop2.default.start();\n            self.resizing = true;\n          },\n\n\n          /**\n           * Begin frame\n           */\n          begin: function begin() {\n            if (self.debug) {\n              stats.begin();\n            }\n\n            sf.resize();\n\n            if (sd.prevTime === 0) {\n              sd.prevTime = Date.now();\n            }\n\n            self.state.running = _mainloop2.default.isRunning();\n          },\n\n\n          /**\n           * Calculate the position of each star\n           */\n          update: function update() {\n            self.mouse.x = (self.cursor.x - sd.x) / self.easing;\n            self.mouse.y = (self.cursor.y - sd.y) / self.easing;\n\n            if (sd.star.arr.length > 0) {\n              for (var i = 0; i < self.compQuantity; i++) {\n                sd.star.arr[i][7] = true;\n                sd.star.arr[i][5] = sd.star.arr[i][3];\n                sd.star.arr[i][6] = sd.star.arr[i][4];\n                sd.star.arr[i][0] += self.mouse.x >> 4;\n\n                // X coords\n                if (sd.star.arr[i][0] > sd.x << 1) {\n                  sd.star.arr[i][0] -= sd.w << 1;\n                  sd.star.arr[i][7] = false;\n                }\n                if (sd.star.arr[i][0] < -sd.x << 1) {\n                  sd.star.arr[i][0] += sd.w << 1;\n                  sd.star.arr[i][7] = false;\n                }\n\n                // Y coords\n                sd.star.arr[i][1] += self.mouse.y >> 4;\n                if (sd.star.arr[i][1] > sd.y << 1) {\n                  sd.star.arr[i][1] -= sd.h << 1;\n                  sd.star.arr[i][7] = false;\n                }\n                if (sd.star.arr[i][1] < -sd.y << 1) {\n                  sd.star.arr[i][1] += sd.h << 1;\n                  sd.star.arr[i][7] = false;\n                }\n\n                // Z coords\n                sd.star.arr[i][2] -= self.compSpeed.lyph;\n                if (sd.star.arr[i][2] > sd.z) {\n                  sd.star.arr[i][2] -= sd.z;\n                  sd.star.arr[i][7] = false;\n                }\n                if (sd.star.arr[i][2] < 0) {\n                  sd.star.arr[i][2] += sd.z;\n                  sd.star.arr[i][7] = false;\n                }\n\n                sd.star.arr[i][3] = sd.x + sd.star.arr[i][0] / sd.star.arr[i][2] * self.ratio.computed;\n                sd.star.arr[i][4] = sd.y + sd.star.arr[i][1] / sd.star.arr[i][2] * self.ratio.computed;\n              }\n            }\n          },\n          draw: function draw() {\n            sd.ctx.fillStyle = self.colors.fill;\n            sd.ctx.fillRect(0, 0, sd.w, sd.h);\n            sd.ctx.strokeStyle = self.starColor;\n\n            if (sd.star.arr.length) {\n              for (var i = 0; i < self.compQuantity; i++) {\n                if (sd.star.arr[i][5] > 0 && sd.star.arr[i][5] < sd.w && sd.star.arr[i][6] > 0 && sd.star.arr[i][6] < sd.h && sd.star.arr[i][7]) {\n                  sd.ctx.lineWidth = (1 - sd.star.colorRatio * sd.star.arr[i][2]) * 2;\n                  sd.ctx.beginPath();\n                  sd.ctx.moveTo(sd.star.arr[i][5], sd.star.arr[i][6]);\n                  sd.ctx.lineTo(sd.star.arr[i][3], sd.star.arr[i][4]);\n                  sd.ctx.stroke();\n                  sd.ctx.closePath();\n                }\n              }\n            }\n          },\n          stop: function stop() {\n            _mainloop2.default.stop();\n            self.state.running = _mainloop2.default.isRunning();\n          },\n          end: function end(fps, panic) {\n            if (self.debug) {\n              stats.end();\n            }\n\n            // Check FPS every second. If it drops too low, reduce the number of stars\n            // If the stars are too few (it looks fugly), stop the animation\n            var delta = Date.now() - sd.prevTime;\n            if (fps < 30 && delta >= 1000) {\n              self.stop();\n              _mainloop2.default.resetFrameDelta();\n\n              self.quantity = self.quantity - 10;\n\n              //self.updateStars(self.quantity)\n\n              self.reset();\n\n              if (self.compQuantity < 32) {\n                self.stop();\n              }\n\n              sd.prevTime = 0;\n            }\n\n            if (panic) {\n              _mainloop2.default.resetFrameDelta();\n            }\n          },\n\n\n          /**\n           * Reset the whole kit and kaboodle\n           */\n          reset: function reset() {\n            self.stop();\n\n            // Reset dimensions\n            sf.resetDims();\n\n            self.init();\n          },\n          destroy: function destroy() {\n            self.stop();\n\n            sf.resetDims();\n\n            sf = null;\n            sd = null;\n          }\n        },\n\n        resetDims: function resetDims() {\n          sd.x = 0;\n          sd.y = 0;\n          sd.z = 0;\n          sd.w = 0;\n          sd.h = 0;\n          sd.cw = 0;\n          sd.ch = 0;\n        }\n      };\n\n      // Animation/init logic and state management\n      // Check for destroy, stop, and reset first\n      if (self.state.destroy) {\n        self.state.destroy = false;\n        sf.anim.destroy();\n      }\n\n      if (self.state.stop) {\n        self.state.stop = false;\n        sf.anim.stop();\n      }\n\n      if (self.state.reset) {\n        self.state.reset = false;\n        sf.anim.reset();\n      }\n\n      // Initialization\n      if (self.state.init) {\n        self.state.init = false;\n        sf.viewport();\n        sf.anim.init();\n      }\n\n      // Set up the canvas if it isn't already\n      if (self.state.canvas) {\n        self.state.canvas = false;\n        sf.canvas();\n      }\n\n      // Animation start\n      if (self.state.start) {\n        self.state.start = false;\n        sf.anim.start();\n      }\n\n      self.listeners();\n    },\n\n\n    // Animation controls\n    reset: function reset() {\n      this.state.reset = true;\n      this.starz();\n    },\n    stop: function stop() {\n      this.state.stop = true;\n      this.starz();\n    },\n    start: function start() {\n      this.state.start = true;\n      this.starz();\n    },\n\n\n    /**\n     * Event listener adders/removers\n     */\n    listeners: function listeners() {\n      var el = this.$el.parentNode;\n\n      /**\n       * Resize listeners\n       */\n      if (this.resizeAdjust) {\n        window.addEventListener('resize', this.resizeHandler);\n      } else {\n        el.removeEventListener('resize', this.resizeHandler);\n      }\n\n      /**\n       * Add/remove mouse move listeners\n       */\n      if (this.mouseAdjust) {\n        el.addEventListener('mousemove', this.mouseHandler);\n      } else {\n        el.removeEventListener('mousemove', this.mouseHandler);\n      }\n\n      /**\n       * Add/remove tilt listeners\n       */\n      if (this.tiltAdjust) {\n        window.addEventListener('deviceorientation', this.tiltHandler);\n      } else {\n        window.removeEventListener('deviceorientation', this.tiltHandler);\n      }\n\n      /**\n       * Add/remove click listeners\n       */\n      if (this.clickToWarp) {\n        el.addEventListener('mousedown', this.clickHandler);\n        el.addEventListener('mouseup', this.clickHandler);\n      } else {\n        el.removeEventListener('mousedown', this.clickHandler);\n        el.removeEventListener('mouseup', this.clickHandler);\n      }\n    },\n\n\n    /**\n     * Call the anim.resize function when the window changes size\n     */\n    resizeHandler: function resizeHandler(e) {\n      this.resizing = true;\n    },\n\n\n    /**\n     * Adds mouse coords to model on move event\n     * @param  {event} event mouse move event\n     * @return {none}\n     */\n    mouseHandler: function mouseHandler(event) {\n      var self = this;\n      var el = this.$el.parentNode;\n\n      _fastdom2.default.measure(function () {\n        self.cursor.x = event.pageX || event.clientX + el.scrollLeft - el.clientLeft;\n        self.cursor.y = event.pageY || event.clientY + el.scrollTop - el.clientTop;\n      });\n    },\n\n\n    /**\n     * Adjusts mouse coords based on evt\n     * @param  {event} event tilt event\n     * @return {null}\n     */\n    tiltHandler: function tiltHandler(event) {\n      var _this = this;\n\n      if (event.beta !== null && event.gamma !== null) {\n        (function () {\n          var self = _this;\n          var x = event.gamma;\n          var y = event.beta;\n\n          _fastdom2.default.measure(function () {\n            self.cursor.x = self.$el.clientWidth / 2 + x * 5;\n            self.cursor.y = self.$el.clientHeight / 2 + y * 5;\n          });\n        })();\n      }\n    },\n\n\n    /**\n     * Toggles hyperspace on event\n     * @param  {event} event Click event\n     * @return {null}\n     */\n    clickHandler: function clickHandler(event) {\n      if (event.type === 'mousedown') {\n        this.hyperspace = true;\n      }\n\n      if (event.type === 'mouseup') {\n        this.hyperspace = false;\n      }\n    }\n  },\n\n  ready: function ready() {\n    var self = this;\n\n    setTimeout(function () {\n      self.init();\n    }, 100);\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Reset state\n    this.state.init = false;\n    this.state.canvas = false;\n    this.state.star = false;\n    this.state.start = false;\n    this.state.stop = false;\n    this.state.destroy = true;\n\n    // Remove listeners\n    this.mouseAdjust = false;\n    this.tiltAdjust = false;\n    this.clickToWarp = false;\n    this.hyperspace = false;\n\n    this.listeners();\n    this.starz();\n  }\n};\nif (module.exports.__esModule) module.exports = module.exports.default\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<div class=\\\"starfield\\\" :class=\\\"{ 'debug' : debug }\\\" id=\\\"{{ ids.vid }}\\\">\\n  <canvas id=\\\"{{ ids.cid }}\\\"></canvas>\\n\\n  <form v-if=\\\"debug\\\" class=\\\"starfield-debug\\\">\\n    <div>\\n      <label for=\\\"isHyperspace\\\">\\n        <input type=\\\"checkbox\\\" id=\\\"isHyperspace\\\" v-model=\\\"hyperspace\\\">Hyperspace\\n      </label>\\n\\n      <label for=\\\"warpFactor\\\">\\n        | Warp Factor\\n      </label>\\n        <input type=\\\"number\\\" name=\\\"warpFactor\\\" id=\\\"warpFactor\\\" placeholder=\\\"{{ warpFactor }}\\\" min=\\\"1\\\" max=\\\"1000\\\" v-model=\\\"warpFactor\\\">\\n    </div>\\n\\n    <div>\\n      <label for=\\\"clickToWarp\\\">\\n        <input type=\\\"checkbox\\\" id=\\\"clickToWarp\\\" v-model=\\\"clickToWarp\\\" @change=\\\"listeners\\\">Click to warp\\n      </label>\\n    </div>\\n\\n    <div>\\n      <label for=\\\"mouseAdjust\\\">\\n        <input type=\\\"checkbox\\\" id=\\\"mouseAdjust\\\" v-model=\\\"mouseAdjust\\\" @change=\\\"listeners\\\">React to mouse movements\\n      </label>\\n    </div>\\n\\n    <div>\\n      <label for=\\\"tiltAdjust\\\">\\n        <input type=\\\"checkbox\\\" id=\\\"tiltAdjust\\\" v-model=\\\"tiltAdjust\\\" @change=\\\"listeners\\\">React to tilt events\\n      </label>\\n    </div>\\n\\n    <div>\\n      <label for=\\\"easing\\\">Friction: </label>\\n      <input type=\\\"number\\\" name=\\\"easing\\\" id=\\\"easing\\\" placeholder=\\\"{{ easing }}\\\" min=\\\"0\\\" max=\\\"100\\\" step=\\\"1\\\" v-model=\\\"easing\\\">\\n    </div>\\n\\n    <div>\\n      <label for=\\\"quantity\\\">Number of stars: </label>\\n      <input type=\\\"number\\\" name=\\\"quantity\\\" id=\\\"quantity\\\" placeholder=\\\"{{ quantity }}\\\" min=\\\"0\\\" max=\\\"8192\\\" step=\\\"1\\\" v-model=\\\"quantity\\\" @change=\\\"reset\\\">\\n    </div>\\n\\n    <div>\\n      <label for=\\\"starColor\\\">Star color:</label>\\n      <input type=\\\"color\\\" value=\\\"{{ compColors.stars }}\\\" v-model=\\\"starColor\\\" @change=\\\"reset\\\">\\n    </div>\\n\\n    <div>\\n      <label for=\\\"bgColor\\\">Background color:</label>\\n      <input type=\\\"color\\\" value=\\\"{{ compColors.bg }}\\\" v-model=\\\"bgColor\\\">\\n    </div>\\n\\n    <div>\\n      <label for=\\\"speed\\\">Speed: </label>\\n      <input type=\\\"number\\\" name=\\\"speed\\\" id=\\\"speed\\\" placeholder=\\\"{{ speed }}\\\" min=\\\"-100\\\" max=\\\"100\\\" step=\\\"1\\\" v-model=\\\"speed\\\">\\n    </div>\\n\\n    <div style=\\\"margin-top: 20px; padding-top: 10px; border-top: 1px solid rgba(255, 255, 255, 0.25); font-size: 0.8em\\\">\\n       <input type=\\\"button\\\" value=\\\"Start\\\" style=\\\"color: #000\\\" disabled=\\\"{{ state.running }}\\\" @click=\\\"start()\\\"> |\\n       <input type=\\\"button\\\" value=\\\"Stop\\\" style=\\\"color: #000\\\" disabled=\\\"{{ !state.running }}\\\" @click=\\\"stop()\\\"> |\\n       <input type=\\\"button\\\" value=\\\"Reset\\\" style=\\\"color: #000\\\" @click=\\\"reset()\\\">\\n    </div>\\n  </form>\\n</div><!-- /.starfield -->\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  var id = \"app/components/Starfield.vue\"\n  module.hot.dispose(function () {\n    require(\"vueify-insert-css\").cache[\"\\n.starfield.debug {\\n  z-index: 2;\\n}\\n.starfield-debug {\\n  position: absolute;\\n  left: 20px;\\n  top:  20px;\\n  color: #fff;\\n  font-size: 16px;\\n  z-index: 1;\\n  line-height: 16px;\\n  font-family: 'Helvetica Neue', Helvetica, arial, sans-serif;\\n  font-weight: 300;\\n}\\n.starfield {\\n  height:   100%;\\n  left:     0;\\n  margin:   0;\\n  padding:  0;\\n  position: absolute;\\n  top:      0;\\n  width:    100%;\\n  z-index:  0;\\n}\\n\\n.starfield canvas {\\n  height:   100%;\\n  left:     0;\\n  position: absolute;\\n  top:      0;\\n  width:    100%;\\n}\\n\\n\"] = false\n    document.head.removeChild(__vueify_style__)\n  })\n  if (!module.hot.data) {\n    hotAPI.createRecord(id, module.exports)\n  } else {\n    hotAPI.update(id, module.exports, (typeof module.exports === \"function\" ? module.exports.options : module.exports).template)\n  }\n})()}","import Vue from 'vue'\nimport Starfield from 'components/Starfield.vue'\n\nlet app = new Vue({\n  el: '#vue',\n\n  components: {\n    Starfield\n  },\n\n  template: '<div><starfield click-to-warp bg-color=\"#f58220\" star-color=\"#ffffff\" :easing=\"13\" :quantity=\"512\"></starfield></div>',\n\n  methods: {\n\n  }\n})\n"]}